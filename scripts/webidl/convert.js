/* eslint-disable no-console */

"use strict";
const path = require("node:path");
const fs = require("node:fs");
const Webidl2js = require("webidl2js");
const { propertyList } = require("cssstyle");
const processReflect = require("./reflection.js");

// Generate CSSStyleProperties.webidl.
const idlAttr = "[CEReactions] attribute [LegacyNullToEmptyString] CSSOMString";
const idlAttrs = [`${idlAttr} cssFloat;`];
for (const { styleDeclaration } of Object.values(propertyList)) {
  if (Array.isArray(styleDeclaration)) {
    for (const property of styleDeclaration) {
      if (property === "float") {
        idlAttrs.push(`${idlAttr} _${property};`);
      } else {
        idlAttrs.push(`${idlAttr} ${property};`);
      }
    }
  }
}
const dateToday = new Date();
const [dateTodayFormatted] = dateToday.toISOString().split("T");
const output = `// autogenerated - ${dateTodayFormatted}
[Exposed=Window]
interface CSSStyleProperties : CSSStyleDeclaration {
  ${idlAttrs.join("\n  ")}
};
`;
const outputFile = path.resolve(__dirname, "../../lib/jsdom/living/cssom/CSSStyleProperties.webidl");
fs.writeFileSync(outputFile, output);

const transformer = new Webidl2js({
  implSuffix: "-impl",
  suppressErrors: true,
  processCEReactions(code) {
    const preSteps = this.addImport("../helpers/custom-elements", "ceReactionsPreSteps");
    const postSteps = this.addImport("../helpers/custom-elements", "ceReactionsPostSteps");

    return `
      ${preSteps}(globalObject);
      try {
        ${code}
      } finally {
        ${postSteps}(globalObject);
      }
    `;
  },
  processHTMLConstructor() {
    const identifier = this.addImport("../helpers/html-constructor", "HTMLConstructor");

    return `
      return ${identifier}(globalObject, interfaceName, new.target);
    `;
  },
  processReflect(idl, implObj) {
    return processReflect(this, idl, implObj);
  }
});

function addDir(dir) {
  const resolved = path.resolve(__dirname, dir);
  transformer.addSource(resolved, resolved);
}

addDir("../../lib/jsdom/living/aborting");
addDir("../../lib/jsdom/living/aria");
addDir("../../lib/jsdom/living/attributes");
addDir("../../lib/jsdom/living/constraint-validation");
addDir("../../lib/jsdom/living/crypto");
addDir("../../lib/jsdom/living/cssom");
addDir("../../lib/jsdom/living/custom-elements");
addDir("../../lib/jsdom/living/deviceorientation");
addDir("../../lib/jsdom/living/domparsing");
addDir("../../lib/jsdom/living/events");
addDir("../../lib/jsdom/living/fetch");
addDir("../../lib/jsdom/living/file-api");
addDir("../../lib/jsdom/living/geometry");
addDir("../../lib/jsdom/living/hr-time");
addDir("../../lib/jsdom/living/mutation-observer");
addDir("../../lib/jsdom/living/navigator");
addDir("../../lib/jsdom/living/nodes");
addDir("../../lib/jsdom/living/range");
addDir("../../lib/jsdom/living/selection");
addDir("../../lib/jsdom/living/svg");
addDir("../../lib/jsdom/living/traversal");
addDir("../../lib/jsdom/living/websockets");
addDir("../../lib/jsdom/living/webstorage");
addDir("../../lib/jsdom/living/window");
addDir("../../lib/jsdom/living/xhr");
addDir("../../lib/jsdom/living/webidl");

const outputDir = path.resolve(__dirname, "../../lib/jsdom/living/generated/");

// Clean up any old stuff lying around.
fs.rmSync(outputDir, { force: true, recursive: true, maxRetries: 2 });
fs.mkdirSync(outputDir);

transformer.generate(outputDir)
  .catch(err => {
    console.error(err);
    process.exit(1);
  });
