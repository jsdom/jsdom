<!DOCTYPE html>
<html>
<head>
<title> event.origin returns the origin of the message (ported from wpt with some changes)</title>
<script src="/resources/testharness.js"></script>
<script src="/resources/testharnessreport.js"></script>
</head>
<body>
<div id=log></div>
<script>
    var loaded = 0;
    var PORT = location.port !== "" ? ":" + location.port : "";
    var XORIGIN = "{{location[scheme]}}://{{domains[天気の良い日]}}" + PORT;
    var SORIGIN = "{{location[scheme]}}://{{host}}" + PORT;
    function PostMessageTest()
      {
          loaded++;

          if (loaded == 2)
          {
              var TARGET1 = document.querySelectorAll("iframe")[0];
              var TARGET2 = document.querySelectorAll("iframe")[1];
              TARGET1.contentWindow.postMessage("#1", XORIGIN);
              TARGET2.contentWindow.postMessage("#2", SORIGIN);
          }
      }
</script>

<div style="display:none">
    <iframe width="70%" onload="PostMessageTest()" src="{{location[scheme]}}://{{domains[天気の良い日]}}:{{location[port]}}/webmessaging/support/ChildWindowPostMessage.htm"></iframe>
    <iframe width="70%" onload="PostMessageTest()" src="./support/ChildWindowPostMessage.htm"></iframe>
</div>

<script>
    var description = "Test Description: event.origin returns the origin of the message.";
    var t = async_test(description);
    var ExpectedResult = ["#1", XORIGIN, "#2", SORIGIN];
    var ActualResult = [];

    window.onmessage = t.step_func(function(e)
    {
        // Messages from TARGET1 and TARGET2 can come in any order
        // (since one of them is cross-origin and can run in parallel).
        // To make the tests immune to message reordering, always
        // put the response from TARGET1 at the start of the list.
        if (e.data.toString() === "#1")
        {
            ActualResult = [e.data, e.origin].concat(ActualResult);
        }
        else if (e.data.toString() === "#2")
        {
            ActualResult = ActualResult.concat([e.data, e.origin]);
        }

        if (ActualResult.length >= ExpectedResult.length)
        {
            assert_array_equals(ActualResult, ExpectedResult, "ActualResult");
            t.done();
        }
    });
</script>
</body>
</html>
